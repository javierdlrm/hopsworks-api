{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hopsworks Client # hopsworks is the python API for interacting with a Hopsworks cluster. Getting Started On Hopsworks # Instantiate a connection and get the project object import hopsworks connection = hopsworks . connection () project = connection . get_project ( \"my_project\" ) Create a new project project = connection . create_project ( \"my_project\" ) Upload data to a project dataset_api = project . get_dataset_api () dataset_api . upload ( \"data.csv\" , \"Resources\" ) You can find more examples on how to use the library in our hops-examples repository. Documentation # Documentation is available at Hopsworks Documentation . Issues # For general questions about the usage of Hopsworks and the Feature Store please open a topic on Hopsworks Community . Please report any issue using Github issue tracking . Contributing # If you would like to contribute to this library, please see the Contribution Guidelines .","title":"Hopsworks Client"},{"location":"#hopsworks-client","text":"hopsworks is the python API for interacting with a Hopsworks cluster.","title":"Hopsworks Client"},{"location":"#getting-started-on-hopsworks","text":"Instantiate a connection and get the project object import hopsworks connection = hopsworks . connection () project = connection . get_project ( \"my_project\" ) Create a new project project = connection . create_project ( \"my_project\" ) Upload data to a project dataset_api = project . get_dataset_api () dataset_api . upload ( \"data.csv\" , \"Resources\" ) You can find more examples on how to use the library in our hops-examples repository.","title":"Getting Started On Hopsworks"},{"location":"#documentation","text":"Documentation is available at Hopsworks Documentation .","title":"Documentation"},{"location":"#issues","text":"For general questions about the usage of Hopsworks and the Feature Store please open a topic on Hopsworks Community . Please report any issue using Github issue tracking .","title":"Issues"},{"location":"#contributing","text":"If you would like to contribute to this library, please see the Contribution Guidelines .","title":"Contributing"},{"location":"CONTRIBUTING/","text":"Python development setup # Fork and clone the repository Create a new Python environment with your favourite environment manager, e.g. virtualenv or conda Install repository in editable mode with development dependencies: cd python pip install -e \".[dev]\" Install pre-commit and then activate its hooks. pre-commit is a framework for managing and maintaining multi-language pre-commit hooks. The library uses pre-commit to ensure code-style and code formatting through black and flake8 . Run the following commands from the python directory: cd python pip install --user pre-commit pre-commit install Afterwards, pre-commit will run whenever you commit. To run formatting and code-style separately, you can configure your IDE, such as VSCode, to use black and flake8, or run them via the command line: cd python flake8 hopsworks black hopsworks Python documentation # We follow a few best practices for writing the Python documentation: Use the google docstring style: \"\"\"[One Line Summary] [Extended Summary] [!!! example import xyz ] # Arguments arg1: Type[, optional]. Description[, defaults to `default`] arg2: Type[, optional]. Description[, defaults to `default`] # Returns Type. Description. # Raises Exception. Description. \"\"\" If Python 3 type annotations are used, they are inserted automatically. Hopsworks entity engine methods (e.g. ExecutionEngine etc.) only require a single line docstring. Private REST Api implementations (e.g. GitRemoteApi etc.) should be fully documented with docstrings without defaults. Public Api such as metadata objects and public REST Api implementations should be fully documented with defaults. Setup and Build Documentation # We use mkdocs together with mike ( for versioning ) to build the documentation and a plugin called keras-autodoc to auto generate Python API documentation from docstrings. Background about mike : mike builds the documentation and commits it as a new directory to the gh-pages branch. Each directory corresponds to one version of the documentation. Additionally, mike maintains a json in the root of gh-pages with the mappings of versions/aliases for each of the directories available. With aliases you can define extra names like dev or latest , to indicate stable and unstable releases. Currently we are using our own version of keras-autodoc pip install git+https://github.com/moritzmeister/keras-autodoc@split-tags-properties Install HOPSWORKS with docs extras: pip install -e . [ dev,docs ] To build the docs, first run the auto doc script: cd .. python auto_doc.py Option 1: Build only current version of docs # Either build the docs, or serve them dynamically: Note: Links and pictures might not resolve properly later on when checking with this build. The reason for that is that the docs are deployed with versioning on docs.hopsworks.ai and therefore another level is added to all paths, e.g. docs.hopsworks.ai/[version-or-alias] . Using relative links should not be affected by this, however, building the docs with version (Option 2) is recommended. mkdocs build # or mkdocs serve Option 2 (Preferred): Build multi-version doc with mike # Versioning on docs.hopsworks.ai # On docs.hopsworks.ai we implement the following versioning scheme: current master branches (e.g. of hopsworks corresponding to master of Hopsworks): rendered as current Hopsworks snapshot version, e.g. 2.6.0-SNAPSHOT [dev] , where dev is an alias to indicate that this is an unstable version. the latest release: rendered with full current version, e.g. 2.5.1 [latest] with latest alias to indicate that this is the latest stable release. previous stable releases: rendered without alias, e.g. 2.5.0 . Build Instructions # For this you can either checkout and make a local copy of the upstream/gh-pages branch, where mike maintains the current state of docs.hopsworks.ai, or just build documentation for the branch you are updating: Building one branch: Checkout your dev branch with modified docs: git checkout [ dev-branch ] Generate API docs if necessary: python auto_doc.py Build docs with a version and alias mike deploy [ version ] [ alias ] --update-alias # for example, if you are updating documentation to be merged to master, # which will become the new SNAPSHOT version: mike deploy 2 .6.0-SNAPSHOT dev --update-alias # if you are updating docs of the latest stable release branch mike deploy [ version ] latest --update-alias # if you are updating docs of a previous stable release branch mike deploy [ version ] If no gh-pages branch existed in your local repository, this will have created it. Important : If no previous docs were built, you will have to choose a version as default to be loaded as index, as follows mike set-default [ version-or-alias ] You can now checkout the gh-pages branch and serve: git checkout gh-pages mike serve You can also list all available versions/aliases: mike list Delete and reset your local gh-pages branch: mike delete --all # or delete single version mike delete [ version-or-alias ] Adding new API documentation # To add new documentation for APIs, you need to add information about the method/class to document to the auto_doc.py script: PAGES = { \"connection.md\" : [ \"hopsworks.connection.Connection.connection\" ] \"new_template.md\" : [ \"module\" , \"xyz.asd\" ] } Now you can add a template markdown file to the docs/templates directory with the name you specified in the auto-doc script. The new_template.md file should contain a tag to identify the place at which the API documentation should be inserted: ## The XYZ package {{module}} Some extra content here. !!! example ```python import xyz ``` {{xyz.asd}} Finally, run the auto_doc.py script, as decribed above, to update the documentation. For information about Markdown syntax and possible Admonitions/Highlighting etc. see the Material for Mkdocs themes reference documentation .","title":"Contributing"},{"location":"CONTRIBUTING/#python-development-setup","text":"Fork and clone the repository Create a new Python environment with your favourite environment manager, e.g. virtualenv or conda Install repository in editable mode with development dependencies: cd python pip install -e \".[dev]\" Install pre-commit and then activate its hooks. pre-commit is a framework for managing and maintaining multi-language pre-commit hooks. The library uses pre-commit to ensure code-style and code formatting through black and flake8 . Run the following commands from the python directory: cd python pip install --user pre-commit pre-commit install Afterwards, pre-commit will run whenever you commit. To run formatting and code-style separately, you can configure your IDE, such as VSCode, to use black and flake8, or run them via the command line: cd python flake8 hopsworks black hopsworks","title":"Python development setup"},{"location":"CONTRIBUTING/#python-documentation","text":"We follow a few best practices for writing the Python documentation: Use the google docstring style: \"\"\"[One Line Summary] [Extended Summary] [!!! example import xyz ] # Arguments arg1: Type[, optional]. Description[, defaults to `default`] arg2: Type[, optional]. Description[, defaults to `default`] # Returns Type. Description. # Raises Exception. Description. \"\"\" If Python 3 type annotations are used, they are inserted automatically. Hopsworks entity engine methods (e.g. ExecutionEngine etc.) only require a single line docstring. Private REST Api implementations (e.g. GitRemoteApi etc.) should be fully documented with docstrings without defaults. Public Api such as metadata objects and public REST Api implementations should be fully documented with defaults.","title":"Python documentation"},{"location":"CONTRIBUTING/#setup-and-build-documentation","text":"We use mkdocs together with mike ( for versioning ) to build the documentation and a plugin called keras-autodoc to auto generate Python API documentation from docstrings. Background about mike : mike builds the documentation and commits it as a new directory to the gh-pages branch. Each directory corresponds to one version of the documentation. Additionally, mike maintains a json in the root of gh-pages with the mappings of versions/aliases for each of the directories available. With aliases you can define extra names like dev or latest , to indicate stable and unstable releases. Currently we are using our own version of keras-autodoc pip install git+https://github.com/moritzmeister/keras-autodoc@split-tags-properties Install HOPSWORKS with docs extras: pip install -e . [ dev,docs ] To build the docs, first run the auto doc script: cd .. python auto_doc.py","title":"Setup and Build Documentation"},{"location":"CONTRIBUTING/#option-1-build-only-current-version-of-docs","text":"Either build the docs, or serve them dynamically: Note: Links and pictures might not resolve properly later on when checking with this build. The reason for that is that the docs are deployed with versioning on docs.hopsworks.ai and therefore another level is added to all paths, e.g. docs.hopsworks.ai/[version-or-alias] . Using relative links should not be affected by this, however, building the docs with version (Option 2) is recommended. mkdocs build # or mkdocs serve","title":"Option 1: Build only current version of docs"},{"location":"CONTRIBUTING/#option-2-preferred-build-multi-version-doc-with-mike","text":"","title":"Option 2 (Preferred): Build multi-version doc with mike"},{"location":"CONTRIBUTING/#versioning-on-docshopsworksai","text":"On docs.hopsworks.ai we implement the following versioning scheme: current master branches (e.g. of hopsworks corresponding to master of Hopsworks): rendered as current Hopsworks snapshot version, e.g. 2.6.0-SNAPSHOT [dev] , where dev is an alias to indicate that this is an unstable version. the latest release: rendered with full current version, e.g. 2.5.1 [latest] with latest alias to indicate that this is the latest stable release. previous stable releases: rendered without alias, e.g. 2.5.0 .","title":"Versioning on docs.hopsworks.ai"},{"location":"CONTRIBUTING/#build-instructions","text":"For this you can either checkout and make a local copy of the upstream/gh-pages branch, where mike maintains the current state of docs.hopsworks.ai, or just build documentation for the branch you are updating: Building one branch: Checkout your dev branch with modified docs: git checkout [ dev-branch ] Generate API docs if necessary: python auto_doc.py Build docs with a version and alias mike deploy [ version ] [ alias ] --update-alias # for example, if you are updating documentation to be merged to master, # which will become the new SNAPSHOT version: mike deploy 2 .6.0-SNAPSHOT dev --update-alias # if you are updating docs of the latest stable release branch mike deploy [ version ] latest --update-alias # if you are updating docs of a previous stable release branch mike deploy [ version ] If no gh-pages branch existed in your local repository, this will have created it. Important : If no previous docs were built, you will have to choose a version as default to be loaded as index, as follows mike set-default [ version-or-alias ] You can now checkout the gh-pages branch and serve: git checkout gh-pages mike serve You can also list all available versions/aliases: mike list Delete and reset your local gh-pages branch: mike delete --all # or delete single version mike delete [ version-or-alias ]","title":"Build Instructions"},{"location":"CONTRIBUTING/#adding-new-api-documentation","text":"To add new documentation for APIs, you need to add information about the method/class to document to the auto_doc.py script: PAGES = { \"connection.md\" : [ \"hopsworks.connection.Connection.connection\" ] \"new_template.md\" : [ \"module\" , \"xyz.asd\" ] } Now you can add a template markdown file to the docs/templates directory with the name you specified in the auto-doc script. The new_template.md file should contain a tag to identify the place at which the API documentation should be inserted: ## The XYZ package {{module}} Some extra content here. !!! example ```python import xyz ``` {{xyz.asd}} Finally, run the auto_doc.py script, as decribed above, to update the documentation. For information about Markdown syntax and possible Admonitions/Highlighting etc. see the Material for Mkdocs themes reference documentation .","title":"Adding new API documentation"},{"location":"generated/api/connection/","text":"Connection API # [source] Connection # hopsworks . connection . Connection ( host = None , port = 443 , project = None , hostname_verification = True , trust_store_path = None , api_key_file = None , api_key_value = None , ) A hopsworks connection object. This class provides convenience classmethods accessible from the hopsworks -module: Connection factory For convenience, hopsworks provides a factory method, accessible from the top level module, so you don't have to import the Connection class manually: import hopsworks conn = hopsworks . connection () Save API Key as File To get started quickly, you can simply create a file with the previously created Hopsworks API Key and place it on the environment from which you wish to connect to Hopsworks. You can then connect by simply passing the path to the key file when instantiating a connection: import hopsworks conn = hopsworks . connection ( 'my_instance' , # DNS of your Hopsworks instance 443 , # Port to reach your Hopsworks instance, defaults to 443 api_key_file = 'hopsworks.key' , # The file containing the API key generated above hostname_verification = True ) # Disable for self-signed certificates ) project = conn . get_project ( \"my_project\" ) Clients in external clusters need to connect to the Hopsworks using an API key. The API key is generated inside the Hopsworks platform, and requires at least the \"project\" scope to be able to access a project. For more information, see the integration guides . Arguments host Optional[str] : The hostname of the Hopsworks instance, defaults to None . port int : The port on which the Hopsworks instance can be reached, defaults to 443 . project Optional[str] : The name of the project to connect to. If this is set connection.get_project() will return the set project. If not set connection.get_project(\"my_project\") should be used. hostname_verification bool : Whether or not to verify Hopsworks\u2019 certificate, defaults to True . trust_store_path Optional[str] : Path on the file system containing the Hopsworks certificates, defaults to None . api_key_file Optional[str] : Path to a file containing the API Key. api_key_value Optional[str] : API Key as string, if provided, however, this should be used with care, especially if the used notebook or job script is accessible by multiple parties. Defaults to None . Returns Connection . Connection handle to perform operations on a Hopsworks project. Properties # [source] api_key_file # [source] api_key_value # [source] host # [source] hostname_verification # [source] port # [source] project # Methods # [source] close # Connection . close () Close a connection gracefully. This will clean up any materialized certificates on the local file system of external environments such as AWS SageMaker. Usage is recommended but optional. [source] connect # Connection . connect () Instantiate the connection. Creating a Connection object implicitly calls this method for you to instantiate the connection. However, it is possible to close the connection gracefully with the close() method, in order to clean up materialized certificates. This might be desired when working on external environments such as AWS SageMaker. Subsequently you can call connect() again to reopen the connection. Example import hopsworks conn = hopsworks . connection () conn . close () conn . connect () [source] connection # Connection . connection ( host = None , port = 443 , project = None , hostname_verification = True , trust_store_path = None , api_key_file = None , api_key_value = None , ) Connection factory method, accessible through hopsworks.connection() . [source] create_project # Connection . create_project ( name , description = None ) Create a new project. Example for creating a new project import hopsworks connection = hopsworks . connection () connection . create_project ( \"my_hopsworks_project\" , description = \"An example Hopsworks project\" ) Arguments name str : The name of the project. arguments : optional description of the project Returns Project . A project handle object to perform operations on. [source] get_project # Connection . get_project ( name = None ) Get an existing project. Arguments name str : The name of the project. Returns Project . A project handle object to perform operations on. [source] get_projects # Connection . get_projects () Get all projects. Returns List[Project] : List of Project objects [source] get_secrets_api # Connection . get_secrets_api () Get the secrets api. Returns SecretsApi : The Secrets Api handle [source] project_exists # Connection . project_exists ( name ) Check if a project exists. Arguments name str : The name of the project. Returns bool . True if project exists, otherwise False","title":"Connection"},{"location":"generated/api/connection/#connection-api","text":"[source]","title":"Connection API"},{"location":"generated/api/connection/#connection","text":"hopsworks . connection . Connection ( host = None , port = 443 , project = None , hostname_verification = True , trust_store_path = None , api_key_file = None , api_key_value = None , ) A hopsworks connection object. This class provides convenience classmethods accessible from the hopsworks -module: Connection factory For convenience, hopsworks provides a factory method, accessible from the top level module, so you don't have to import the Connection class manually: import hopsworks conn = hopsworks . connection () Save API Key as File To get started quickly, you can simply create a file with the previously created Hopsworks API Key and place it on the environment from which you wish to connect to Hopsworks. You can then connect by simply passing the path to the key file when instantiating a connection: import hopsworks conn = hopsworks . connection ( 'my_instance' , # DNS of your Hopsworks instance 443 , # Port to reach your Hopsworks instance, defaults to 443 api_key_file = 'hopsworks.key' , # The file containing the API key generated above hostname_verification = True ) # Disable for self-signed certificates ) project = conn . get_project ( \"my_project\" ) Clients in external clusters need to connect to the Hopsworks using an API key. The API key is generated inside the Hopsworks platform, and requires at least the \"project\" scope to be able to access a project. For more information, see the integration guides . Arguments host Optional[str] : The hostname of the Hopsworks instance, defaults to None . port int : The port on which the Hopsworks instance can be reached, defaults to 443 . project Optional[str] : The name of the project to connect to. If this is set connection.get_project() will return the set project. If not set connection.get_project(\"my_project\") should be used. hostname_verification bool : Whether or not to verify Hopsworks\u2019 certificate, defaults to True . trust_store_path Optional[str] : Path on the file system containing the Hopsworks certificates, defaults to None . api_key_file Optional[str] : Path to a file containing the API Key. api_key_value Optional[str] : API Key as string, if provided, however, this should be used with care, especially if the used notebook or job script is accessible by multiple parties. Defaults to None . Returns Connection . Connection handle to perform operations on a Hopsworks project.","title":"Connection"},{"location":"generated/api/connection/#properties","text":"[source]","title":"Properties"},{"location":"generated/api/connection/#api_key_file","text":"[source]","title":"api_key_file"},{"location":"generated/api/connection/#api_key_value","text":"[source]","title":"api_key_value"},{"location":"generated/api/connection/#host","text":"[source]","title":"host"},{"location":"generated/api/connection/#hostname_verification","text":"[source]","title":"hostname_verification"},{"location":"generated/api/connection/#port","text":"[source]","title":"port"},{"location":"generated/api/connection/#project","text":"","title":"project"},{"location":"generated/api/connection/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/connection/#close","text":"Connection . close () Close a connection gracefully. This will clean up any materialized certificates on the local file system of external environments such as AWS SageMaker. Usage is recommended but optional. [source]","title":"close"},{"location":"generated/api/connection/#connect","text":"Connection . connect () Instantiate the connection. Creating a Connection object implicitly calls this method for you to instantiate the connection. However, it is possible to close the connection gracefully with the close() method, in order to clean up materialized certificates. This might be desired when working on external environments such as AWS SageMaker. Subsequently you can call connect() again to reopen the connection. Example import hopsworks conn = hopsworks . connection () conn . close () conn . connect () [source]","title":"connect"},{"location":"generated/api/connection/#connection_1","text":"Connection . connection ( host = None , port = 443 , project = None , hostname_verification = True , trust_store_path = None , api_key_file = None , api_key_value = None , ) Connection factory method, accessible through hopsworks.connection() . [source]","title":"connection"},{"location":"generated/api/connection/#create_project","text":"Connection . create_project ( name , description = None ) Create a new project. Example for creating a new project import hopsworks connection = hopsworks . connection () connection . create_project ( \"my_hopsworks_project\" , description = \"An example Hopsworks project\" ) Arguments name str : The name of the project. arguments : optional description of the project Returns Project . A project handle object to perform operations on. [source]","title":"create_project"},{"location":"generated/api/connection/#get_project","text":"Connection . get_project ( name = None ) Get an existing project. Arguments name str : The name of the project. Returns Project . A project handle object to perform operations on. [source]","title":"get_project"},{"location":"generated/api/connection/#get_projects","text":"Connection . get_projects () Get all projects. Returns List[Project] : List of Project objects [source]","title":"get_projects"},{"location":"generated/api/connection/#get_secrets_api","text":"Connection . get_secrets_api () Get the secrets api. Returns SecretsApi : The Secrets Api handle [source]","title":"get_secrets_api"},{"location":"generated/api/connection/#project_exists","text":"Connection . project_exists ( name ) Check if a project exists. Arguments name str : The name of the project. Returns bool . True if project exists, otherwise False","title":"project_exists"},{"location":"generated/api/datasets/","text":"Datasets API # Handle # [source] get_dataset_api # Project . get_dataset_api () Get the dataset api for the project. Returns DatasetApi : The Datasets Api handle Methods # [source] download # DatasetApi . download ( path , local_path = None , overwrite = False ) Download file from Hopsworks Filesystem to the current working directory. import hopsworks connection = hopsworks . connection () project = connection . get_project () dataset_api = project . get_dataset_api () downloaded_file_path = dataset_api . download ( \"Resources/my_local_file.txt\" ) Arguments path str : path in Hopsworks filesystem to the file local_path Optional[str] : path where to download the file in the local filesystem overwrite bool : overwrite local file if exists Returns str : Path to downloaded file Raises RestAPIError : If unable to download the file [source] exists # DatasetApi . exists ( path ) Check if a file exists in the Hopsworks Filesystem. Arguments path str : path to check Returns bool : True if exists, otherwise False Raises RestAPIError : If unable to check existence for the path [source] remove # DatasetApi . remove ( path ) Remove a path in the Hopsworks Filesystem. Arguments path str : path to remove Raises RestAPIError : If unable to remove the path [source] upload # DatasetApi . upload ( local_path , upload_path , overwrite = False ) Upload a file to the Hopsworks filesystem. import hopsworks connection = hopsworks . connection () project = connection . get_project () dataset_api = project . get_dataset_api () uploaded_file_path = dataset_api . upload ( \"my_local_file.txt\" , \"Resources\" ) Arguments local_path str : local path to file to upload upload_path str : path to directory where to upload the file in Hopsworks Filesystem overwrite bool : overwrite file if exists Returns str : Path to uploaded file Raises RestAPIError : If unable to upload the file","title":"Datasets"},{"location":"generated/api/datasets/#datasets-api","text":"","title":"Datasets API"},{"location":"generated/api/datasets/#handle","text":"[source]","title":"Handle"},{"location":"generated/api/datasets/#get_dataset_api","text":"Project . get_dataset_api () Get the dataset api for the project. Returns DatasetApi : The Datasets Api handle","title":"get_dataset_api"},{"location":"generated/api/datasets/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/datasets/#download","text":"DatasetApi . download ( path , local_path = None , overwrite = False ) Download file from Hopsworks Filesystem to the current working directory. import hopsworks connection = hopsworks . connection () project = connection . get_project () dataset_api = project . get_dataset_api () downloaded_file_path = dataset_api . download ( \"Resources/my_local_file.txt\" ) Arguments path str : path in Hopsworks filesystem to the file local_path Optional[str] : path where to download the file in the local filesystem overwrite bool : overwrite local file if exists Returns str : Path to downloaded file Raises RestAPIError : If unable to download the file [source]","title":"download"},{"location":"generated/api/datasets/#exists","text":"DatasetApi . exists ( path ) Check if a file exists in the Hopsworks Filesystem. Arguments path str : path to check Returns bool : True if exists, otherwise False Raises RestAPIError : If unable to check existence for the path [source]","title":"exists"},{"location":"generated/api/datasets/#remove","text":"DatasetApi . remove ( path ) Remove a path in the Hopsworks Filesystem. Arguments path str : path to remove Raises RestAPIError : If unable to remove the path [source]","title":"remove"},{"location":"generated/api/datasets/#upload","text":"DatasetApi . upload ( local_path , upload_path , overwrite = False ) Upload a file to the Hopsworks filesystem. import hopsworks connection = hopsworks . connection () project = connection . get_project () dataset_api = project . get_dataset_api () uploaded_file_path = dataset_api . upload ( \"my_local_file.txt\" , \"Resources\" ) Arguments local_path str : local path to file to upload upload_path str : path to directory where to upload the file in Hopsworks Filesystem overwrite bool : overwrite file if exists Returns str : Path to uploaded file Raises RestAPIError : If unable to upload the file","title":"upload"},{"location":"generated/api/executions/","text":"Executions API # [source] Execution # hopsworks . execution . Execution ( id = None , state = None , final_status = None , submission_time = None , stdout_path = None , stderr_path = None , app_id = None , hdfs_user = None , args = None , progress = None , user = None , files_to_remove = None , duration = None , flink_master_url = None , monitoring = None , type = None , href = None , project_id = None , job_name = None , ) Creation # [source] run # Job . run ( args = None , await_termination = None ) Run the job, with the option of passing runtime arguments. Example of a blocking execution and downloading logs once execution is finished. # Run the job execution = job . run ( await_termination = True ) # True if job executed successfully print ( execution . success ) # Download logs out_log_path , err_log_path = execution . download_logs () Arguments args Optional[str] : optional runtime arguments for the job await_termination Optional[bool] : if True wait until termination is complete Returns Execution . The execution object for the submitted run. Retrieval # [source] get_executions # Job . get_executions () Retrieves all executions for the job. Returns List[Execution] Raises RestAPIError in case the backend fails to retrieve executions. Properties # [source] app_id # Application id for the execution [source] args # Arguments set for the execution. [source] duration # Duration in milliseconds the execution ran. [source] final_status # Final status of the execution. Can be UNDEFINED, SUCCEEDED, FAILED or KILLED. [source] hdfs_user # Filesystem user for the execution. [source] id # Id of the execution [source] job_name # Name of the job the execution belongs to [source] progress # Progress of the execution. [source] state # Current state of the execution. [source] stderr_path # Path in Hopsworks Filesystem to stderr log file [source] stdout_path # Path in Hopsworks Filesystem to stdout log file [source] submission_time # Timestamp when the execution was submitted [source] success # Boolean to indicate if execution ran successfully or failed Returns bool . True if execution ran successfully. False if execution failed or was killed. [source] user # User that submitted the execution. Methods # [source] delete # Execution . delete () Delete the execution Potentially dangerous operation This operation deletes the execution. Raises RestAPIError . [source] download_logs # Execution . download_logs () Download stdout and stderr logs for the execution Example for downloading and printing the logs # Download logs out_log_path , err_log_path = execution . download_logs () out_fd = open ( out_log_path , \"r\" ) print ( out_fd . read ()) err_fd = open ( err_log_path , \"r\" ) print ( err_fd . read ()) Returns str . Path to downloaded log for stdout. str . Path to downloaded log for stderr.","title":"Executions"},{"location":"generated/api/executions/#executions-api","text":"[source]","title":"Executions API"},{"location":"generated/api/executions/#execution","text":"hopsworks . execution . Execution ( id = None , state = None , final_status = None , submission_time = None , stdout_path = None , stderr_path = None , app_id = None , hdfs_user = None , args = None , progress = None , user = None , files_to_remove = None , duration = None , flink_master_url = None , monitoring = None , type = None , href = None , project_id = None , job_name = None , )","title":"Execution"},{"location":"generated/api/executions/#creation","text":"[source]","title":"Creation"},{"location":"generated/api/executions/#run","text":"Job . run ( args = None , await_termination = None ) Run the job, with the option of passing runtime arguments. Example of a blocking execution and downloading logs once execution is finished. # Run the job execution = job . run ( await_termination = True ) # True if job executed successfully print ( execution . success ) # Download logs out_log_path , err_log_path = execution . download_logs () Arguments args Optional[str] : optional runtime arguments for the job await_termination Optional[bool] : if True wait until termination is complete Returns Execution . The execution object for the submitted run.","title":"run"},{"location":"generated/api/executions/#retrieval","text":"[source]","title":"Retrieval"},{"location":"generated/api/executions/#get_executions","text":"Job . get_executions () Retrieves all executions for the job. Returns List[Execution] Raises RestAPIError in case the backend fails to retrieve executions.","title":"get_executions"},{"location":"generated/api/executions/#properties","text":"[source]","title":"Properties"},{"location":"generated/api/executions/#app_id","text":"Application id for the execution [source]","title":"app_id"},{"location":"generated/api/executions/#args","text":"Arguments set for the execution. [source]","title":"args"},{"location":"generated/api/executions/#duration","text":"Duration in milliseconds the execution ran. [source]","title":"duration"},{"location":"generated/api/executions/#final_status","text":"Final status of the execution. Can be UNDEFINED, SUCCEEDED, FAILED or KILLED. [source]","title":"final_status"},{"location":"generated/api/executions/#hdfs_user","text":"Filesystem user for the execution. [source]","title":"hdfs_user"},{"location":"generated/api/executions/#id","text":"Id of the execution [source]","title":"id"},{"location":"generated/api/executions/#job_name","text":"Name of the job the execution belongs to [source]","title":"job_name"},{"location":"generated/api/executions/#progress","text":"Progress of the execution. [source]","title":"progress"},{"location":"generated/api/executions/#state","text":"Current state of the execution. [source]","title":"state"},{"location":"generated/api/executions/#stderr_path","text":"Path in Hopsworks Filesystem to stderr log file [source]","title":"stderr_path"},{"location":"generated/api/executions/#stdout_path","text":"Path in Hopsworks Filesystem to stdout log file [source]","title":"stdout_path"},{"location":"generated/api/executions/#submission_time","text":"Timestamp when the execution was submitted [source]","title":"submission_time"},{"location":"generated/api/executions/#success","text":"Boolean to indicate if execution ran successfully or failed Returns bool . True if execution ran successfully. False if execution failed or was killed. [source]","title":"success"},{"location":"generated/api/executions/#user","text":"User that submitted the execution.","title":"user"},{"location":"generated/api/executions/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/executions/#delete","text":"Execution . delete () Delete the execution Potentially dangerous operation This operation deletes the execution. Raises RestAPIError . [source]","title":"delete"},{"location":"generated/api/executions/#download_logs","text":"Execution . download_logs () Download stdout and stderr logs for the execution Example for downloading and printing the logs # Download logs out_log_path , err_log_path = execution . download_logs () out_fd = open ( out_log_path , \"r\" ) print ( out_fd . read ()) err_fd = open ( err_log_path , \"r\" ) print ( err_fd . read ()) Returns str . Path to downloaded log for stdout. str . Path to downloaded log for stderr.","title":"download_logs"},{"location":"generated/api/git_provider/","text":"GitProvider API # [source] GitProvider # hopsworks . git_provider . GitProvider ( username = None , token = None , git_provider = None , url = None , name = None , type = None , href = None , expand = None , items = None , count = None , project_id = None , project_name = None , ) Handle # [source] get_git_api # Project . get_git_api () Get the git repository api for the project. Returns GitApi : The Git Api handle Creation # [source] set_provider # GitApi . set_provider ( provider , username , token ) Configure a Git provider import hopsworks connection = hopsworks . connection () project = connection . get_project () git_api = project . get_git_api () git_api . set_provider ( \"GitHub\" , \"my_user\" , \"my_token\" ) Arguments provider str : Name of git provider. Valid values are \"GitHub\", \"GitLab\" and \"BitBucket\". username str : Username for the git provider service token str : Token to set for the git provider service Raises RestAPIError : If unable to configure the git provider Retrieval # [source] get_provider # GitApi . get_provider ( provider ) Get the configured Git provider Arguments provider str : Name of git provider. Valid values are \"GitHub\", \"GitLab\" and \"BitBucket\". Returns GitProvider : The git provider Raises RestAPIError : If unable to get the git provider [source] get_providers # GitApi . get_providers () Get the configured Git providers Returns List[GitProvider] : List of git provider objects Raises RestAPIError : If unable to get the git providers Properties # [source] git_provider # Name of the provider, can be GitHub, GitLab or BitBucket [source] username # Username set for the provider Methods # [source] delete # GitProvider . delete () Remove the git provider configuration. Raises RestAPIError .","title":"GitProvider"},{"location":"generated/api/git_provider/#gitprovider-api","text":"[source]","title":"GitProvider API"},{"location":"generated/api/git_provider/#gitprovider","text":"hopsworks . git_provider . GitProvider ( username = None , token = None , git_provider = None , url = None , name = None , type = None , href = None , expand = None , items = None , count = None , project_id = None , project_name = None , )","title":"GitProvider"},{"location":"generated/api/git_provider/#handle","text":"[source]","title":"Handle"},{"location":"generated/api/git_provider/#get_git_api","text":"Project . get_git_api () Get the git repository api for the project. Returns GitApi : The Git Api handle","title":"get_git_api"},{"location":"generated/api/git_provider/#creation","text":"[source]","title":"Creation"},{"location":"generated/api/git_provider/#set_provider","text":"GitApi . set_provider ( provider , username , token ) Configure a Git provider import hopsworks connection = hopsworks . connection () project = connection . get_project () git_api = project . get_git_api () git_api . set_provider ( \"GitHub\" , \"my_user\" , \"my_token\" ) Arguments provider str : Name of git provider. Valid values are \"GitHub\", \"GitLab\" and \"BitBucket\". username str : Username for the git provider service token str : Token to set for the git provider service Raises RestAPIError : If unable to configure the git provider","title":"set_provider"},{"location":"generated/api/git_provider/#retrieval","text":"[source]","title":"Retrieval"},{"location":"generated/api/git_provider/#get_provider","text":"GitApi . get_provider ( provider ) Get the configured Git provider Arguments provider str : Name of git provider. Valid values are \"GitHub\", \"GitLab\" and \"BitBucket\". Returns GitProvider : The git provider Raises RestAPIError : If unable to get the git provider [source]","title":"get_provider"},{"location":"generated/api/git_provider/#get_providers","text":"GitApi . get_providers () Get the configured Git providers Returns List[GitProvider] : List of git provider objects Raises RestAPIError : If unable to get the git providers","title":"get_providers"},{"location":"generated/api/git_provider/#properties","text":"[source]","title":"Properties"},{"location":"generated/api/git_provider/#git_provider","text":"Name of the provider, can be GitHub, GitLab or BitBucket [source]","title":"git_provider"},{"location":"generated/api/git_provider/#username","text":"Username set for the provider","title":"username"},{"location":"generated/api/git_provider/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/git_provider/#delete","text":"GitProvider . delete () Remove the git provider configuration. Raises RestAPIError .","title":"delete"},{"location":"generated/api/git_remote/","text":"GitRemote API # [source] GitRemote # hopsworks . git_remote . GitRemote ( remote_name = None , remote_url = None , url = None , name = None , type = None , href = None , expand = None , items = None , count = None , project_id = None , project_name = None , ) Handle # [source] get_git_api # Project . get_git_api () Get the git repository api for the project. Returns GitApi : The Git Api handle Creation # [source] add_remote # GitRepo . add_remote ( name , url ) Add a remote for the repo import hopsworks connection = hopsworks . connection () project = connection . get_project () git_api = project . get_git_api () repo = git_api . get_repo ( \"my_repo\" ) repo . add_remote ( \"upstream\" , \"https://github.com/organization/repo.git\" ) Arguments name str : name of the remote url str : url of the remote Returns GitRemote Raises RestAPIError in case the backend fails to add the remote. Retrieval # [source] get_remote # GitRepo . get_remote ( name ) Get a remote by name for the repo. Arguments name str : name of the remote Returns GitRemote Raises RestAPIError in case the backend fails to get the remote. [source] get_remotes # GitRepo . get_remotes () Get the configured remotes for the repo. Returns List[GitRemote] Raises RestAPIError in case the backend fails to retrieve the remotes. Properties # [source] name # Name of the remote [source] url # Url of the remote Methods # [source] delete # GitRemote . delete () Remove the git remote from the repo. Raises RestAPIError .","title":"GitRemote"},{"location":"generated/api/git_remote/#gitremote-api","text":"[source]","title":"GitRemote API"},{"location":"generated/api/git_remote/#gitremote","text":"hopsworks . git_remote . GitRemote ( remote_name = None , remote_url = None , url = None , name = None , type = None , href = None , expand = None , items = None , count = None , project_id = None , project_name = None , )","title":"GitRemote"},{"location":"generated/api/git_remote/#handle","text":"[source]","title":"Handle"},{"location":"generated/api/git_remote/#get_git_api","text":"Project . get_git_api () Get the git repository api for the project. Returns GitApi : The Git Api handle","title":"get_git_api"},{"location":"generated/api/git_remote/#creation","text":"[source]","title":"Creation"},{"location":"generated/api/git_remote/#add_remote","text":"GitRepo . add_remote ( name , url ) Add a remote for the repo import hopsworks connection = hopsworks . connection () project = connection . get_project () git_api = project . get_git_api () repo = git_api . get_repo ( \"my_repo\" ) repo . add_remote ( \"upstream\" , \"https://github.com/organization/repo.git\" ) Arguments name str : name of the remote url str : url of the remote Returns GitRemote Raises RestAPIError in case the backend fails to add the remote.","title":"add_remote"},{"location":"generated/api/git_remote/#retrieval","text":"[source]","title":"Retrieval"},{"location":"generated/api/git_remote/#get_remote","text":"GitRepo . get_remote ( name ) Get a remote by name for the repo. Arguments name str : name of the remote Returns GitRemote Raises RestAPIError in case the backend fails to get the remote. [source]","title":"get_remote"},{"location":"generated/api/git_remote/#get_remotes","text":"GitRepo . get_remotes () Get the configured remotes for the repo. Returns List[GitRemote] Raises RestAPIError in case the backend fails to retrieve the remotes.","title":"get_remotes"},{"location":"generated/api/git_remote/#properties","text":"[source]","title":"Properties"},{"location":"generated/api/git_remote/#name","text":"Name of the remote [source]","title":"name"},{"location":"generated/api/git_remote/#url","text":"Url of the remote","title":"url"},{"location":"generated/api/git_remote/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/git_remote/#delete","text":"GitRemote . delete () Remove the git remote from the repo. Raises RestAPIError .","title":"delete"},{"location":"generated/api/git_repo/","text":"GitRepo API # [source] GitRepo # hopsworks . git_repo . GitRepo ( id = None , name = None , path = None , creator = None , provider = None , current_branch = None , current_commit = None , ongoing_operation = None , type = None , href = None , expand = None , items = None , count = None , project_id = None , project_name = None , ) Handle # [source] get_git_api # Project . get_git_api () Get the git repository api for the project. Returns GitApi : The Git Api handle Creation # [source] clone # GitApi . clone ( url , path , provider = None , branch = None ) Clone a new Git Repo in to Hopsworks Filesystem. import hopsworks connection = hopsworks . connection () project = connection . get_project () git_api = project . get_git_api () git_repo = git_api . clone ( \"https://github.com/logicalclocks/hops-examples.git\" , \"Resources\" , \"GitHub\" ) Arguments url str : Url to the git repository path str : Path in Hopsworks Filesystem to clone the repo to provider Optional[str] : The git provider where the repo is currently hosted. Valid values are \"GitHub\", \"GitLab\" and \"BitBucket\". branch Optional[str] : Optional branch to clone, defaults to configured main branch Returns GitRepo : Git repository object Raises RestAPIError : If unable to clone the git repository. Retrieval # [source] get_repo # GitApi . get_repo ( name , path = None ) Get the cloned Git repository Arguments name str : Name of git repository path Optional[str] : Optional path to specify if multiple git repos with the same name exists in the project Returns GitRepo : The git repository Raises RestAPIError : If unable to get the git repository [source] get_repos # GitApi . get_repos () Get the existing Git repositories Returns List[GitRepo] : List of git repository objects Raises RestAPIError : If unable to get the repositories Properties # [source] creator # Creator of the git repo [source] current_branch # The current branch for the git repo [source] current_commit # The current commit for the git repo [source] id # Id of the git repo [source] name # Name of the git repo [source] path # Path to the git repo in the Hopsworks Filesystem [source] provider # Git provider for the repo, can be GitHub, GitLab or BitBucket Methods # [source] add_remote # GitRepo . add_remote ( name , url ) Add a remote for the repo import hopsworks connection = hopsworks . connection () project = connection . get_project () git_api = project . get_git_api () repo = git_api . get_repo ( \"my_repo\" ) repo . add_remote ( \"upstream\" , \"https://github.com/organization/repo.git\" ) Arguments name str : name of the remote url str : url of the remote Returns GitRemote Raises RestAPIError in case the backend fails to add the remote. [source] checkout_branch # GitRepo . checkout_branch ( branch , create = False ) Checkout a branch Arguments branch str : name of the branch create bool : if true will create a new branch and check it out Raises RestAPIError in case the backend fails to retrieve the commits. [source] checkout_commit # GitRepo . checkout_commit ( commit ) Checkout a commit Arguments commit str : hash of the commit Raises RestAPIError in case the backend fails to retrieve the commits. [source] checkout_files # GitRepo . checkout_files ( files ) Checkout a list of files Arguments files Union[List[str], List[hopsworks.git_file_status.GitFileStatus]] : list of files or GitFileStatus objects to checkout Raises RestAPIError in case the backend fails to checkout the files. [source] commit # GitRepo . commit ( message , all = True , files = None ) Add changes and new files, and then commit them Arguments message str : name of the remote all bool : automatically stage files that have been modified and deleted, but new files are not affected files Optional[List[str]] : list of new files to add and commit Raises RestAPIError in case the backend fails to perform the commit. [source] delete # GitRepo . delete () Delete the git repo from the filesystem. Potentially dangerous operation This operation deletes the cloned git repository from the filesystem. Raises RestAPIError . [source] delete_branch # GitRepo . delete_branch ( branch ) Delete a branch from local repository Arguments branch str : name of the branch Raises RestAPIError in case the backend fails to delete the branch. [source] get_commits # GitRepo . get_commits ( branch ) Get the commits for the repo and branch. Arguments branch str : name of the branch Returns List[GitCommit] Raises RestAPIError in case the backend fails to retrieve the commits. [source] get_remote # GitRepo . get_remote ( name ) Get a remote by name for the repo. Arguments name str : name of the remote Returns GitRemote Raises RestAPIError in case the backend fails to get the remote. [source] get_remotes # GitRepo . get_remotes () Get the configured remotes for the repo. Returns List[GitRemote] Raises RestAPIError in case the backend fails to retrieve the remotes. [source] pull # GitRepo . pull ( branch , remote = \"origin\" ) Pull changes from remote branch Arguments branch str : name of the branch remote str : name of the remote Raises RestAPIError in case the backend fails to retrieve the commits. [source] push # GitRepo . push ( branch , remote = \"origin\" ) Push changes to the remote branch Arguments branch str : name of the branch remote str : name of the remote Raises RestAPIError in case the backend fails to retrieve the commits. [source] status # GitRepo . status () Get the status of the repo. Returns List[GitFileStatus] Raises RestAPIError in case the backend fails to retrieve the status.","title":"GitRepo"},{"location":"generated/api/git_repo/#gitrepo-api","text":"[source]","title":"GitRepo API"},{"location":"generated/api/git_repo/#gitrepo","text":"hopsworks . git_repo . GitRepo ( id = None , name = None , path = None , creator = None , provider = None , current_branch = None , current_commit = None , ongoing_operation = None , type = None , href = None , expand = None , items = None , count = None , project_id = None , project_name = None , )","title":"GitRepo"},{"location":"generated/api/git_repo/#handle","text":"[source]","title":"Handle"},{"location":"generated/api/git_repo/#get_git_api","text":"Project . get_git_api () Get the git repository api for the project. Returns GitApi : The Git Api handle","title":"get_git_api"},{"location":"generated/api/git_repo/#creation","text":"[source]","title":"Creation"},{"location":"generated/api/git_repo/#clone","text":"GitApi . clone ( url , path , provider = None , branch = None ) Clone a new Git Repo in to Hopsworks Filesystem. import hopsworks connection = hopsworks . connection () project = connection . get_project () git_api = project . get_git_api () git_repo = git_api . clone ( \"https://github.com/logicalclocks/hops-examples.git\" , \"Resources\" , \"GitHub\" ) Arguments url str : Url to the git repository path str : Path in Hopsworks Filesystem to clone the repo to provider Optional[str] : The git provider where the repo is currently hosted. Valid values are \"GitHub\", \"GitLab\" and \"BitBucket\". branch Optional[str] : Optional branch to clone, defaults to configured main branch Returns GitRepo : Git repository object Raises RestAPIError : If unable to clone the git repository.","title":"clone"},{"location":"generated/api/git_repo/#retrieval","text":"[source]","title":"Retrieval"},{"location":"generated/api/git_repo/#get_repo","text":"GitApi . get_repo ( name , path = None ) Get the cloned Git repository Arguments name str : Name of git repository path Optional[str] : Optional path to specify if multiple git repos with the same name exists in the project Returns GitRepo : The git repository Raises RestAPIError : If unable to get the git repository [source]","title":"get_repo"},{"location":"generated/api/git_repo/#get_repos","text":"GitApi . get_repos () Get the existing Git repositories Returns List[GitRepo] : List of git repository objects Raises RestAPIError : If unable to get the repositories","title":"get_repos"},{"location":"generated/api/git_repo/#properties","text":"[source]","title":"Properties"},{"location":"generated/api/git_repo/#creator","text":"Creator of the git repo [source]","title":"creator"},{"location":"generated/api/git_repo/#current_branch","text":"The current branch for the git repo [source]","title":"current_branch"},{"location":"generated/api/git_repo/#current_commit","text":"The current commit for the git repo [source]","title":"current_commit"},{"location":"generated/api/git_repo/#id","text":"Id of the git repo [source]","title":"id"},{"location":"generated/api/git_repo/#name","text":"Name of the git repo [source]","title":"name"},{"location":"generated/api/git_repo/#path","text":"Path to the git repo in the Hopsworks Filesystem [source]","title":"path"},{"location":"generated/api/git_repo/#provider","text":"Git provider for the repo, can be GitHub, GitLab or BitBucket","title":"provider"},{"location":"generated/api/git_repo/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/git_repo/#add_remote","text":"GitRepo . add_remote ( name , url ) Add a remote for the repo import hopsworks connection = hopsworks . connection () project = connection . get_project () git_api = project . get_git_api () repo = git_api . get_repo ( \"my_repo\" ) repo . add_remote ( \"upstream\" , \"https://github.com/organization/repo.git\" ) Arguments name str : name of the remote url str : url of the remote Returns GitRemote Raises RestAPIError in case the backend fails to add the remote. [source]","title":"add_remote"},{"location":"generated/api/git_repo/#checkout_branch","text":"GitRepo . checkout_branch ( branch , create = False ) Checkout a branch Arguments branch str : name of the branch create bool : if true will create a new branch and check it out Raises RestAPIError in case the backend fails to retrieve the commits. [source]","title":"checkout_branch"},{"location":"generated/api/git_repo/#checkout_commit","text":"GitRepo . checkout_commit ( commit ) Checkout a commit Arguments commit str : hash of the commit Raises RestAPIError in case the backend fails to retrieve the commits. [source]","title":"checkout_commit"},{"location":"generated/api/git_repo/#checkout_files","text":"GitRepo . checkout_files ( files ) Checkout a list of files Arguments files Union[List[str], List[hopsworks.git_file_status.GitFileStatus]] : list of files or GitFileStatus objects to checkout Raises RestAPIError in case the backend fails to checkout the files. [source]","title":"checkout_files"},{"location":"generated/api/git_repo/#commit","text":"GitRepo . commit ( message , all = True , files = None ) Add changes and new files, and then commit them Arguments message str : name of the remote all bool : automatically stage files that have been modified and deleted, but new files are not affected files Optional[List[str]] : list of new files to add and commit Raises RestAPIError in case the backend fails to perform the commit. [source]","title":"commit"},{"location":"generated/api/git_repo/#delete","text":"GitRepo . delete () Delete the git repo from the filesystem. Potentially dangerous operation This operation deletes the cloned git repository from the filesystem. Raises RestAPIError . [source]","title":"delete"},{"location":"generated/api/git_repo/#delete_branch","text":"GitRepo . delete_branch ( branch ) Delete a branch from local repository Arguments branch str : name of the branch Raises RestAPIError in case the backend fails to delete the branch. [source]","title":"delete_branch"},{"location":"generated/api/git_repo/#get_commits","text":"GitRepo . get_commits ( branch ) Get the commits for the repo and branch. Arguments branch str : name of the branch Returns List[GitCommit] Raises RestAPIError in case the backend fails to retrieve the commits. [source]","title":"get_commits"},{"location":"generated/api/git_repo/#get_remote","text":"GitRepo . get_remote ( name ) Get a remote by name for the repo. Arguments name str : name of the remote Returns GitRemote Raises RestAPIError in case the backend fails to get the remote. [source]","title":"get_remote"},{"location":"generated/api/git_repo/#get_remotes","text":"GitRepo . get_remotes () Get the configured remotes for the repo. Returns List[GitRemote] Raises RestAPIError in case the backend fails to retrieve the remotes. [source]","title":"get_remotes"},{"location":"generated/api/git_repo/#pull","text":"GitRepo . pull ( branch , remote = \"origin\" ) Pull changes from remote branch Arguments branch str : name of the branch remote str : name of the remote Raises RestAPIError in case the backend fails to retrieve the commits. [source]","title":"pull"},{"location":"generated/api/git_repo/#push","text":"GitRepo . push ( branch , remote = \"origin\" ) Push changes to the remote branch Arguments branch str : name of the branch remote str : name of the remote Raises RestAPIError in case the backend fails to retrieve the commits. [source]","title":"push"},{"location":"generated/api/git_repo/#status","text":"GitRepo . status () Get the status of the repo. Returns List[GitFileStatus] Raises RestAPIError in case the backend fails to retrieve the status.","title":"status"},{"location":"generated/api/jobs/","text":"Jobs API # [source] Job # hopsworks . job . Job ( id , name , creation_time , config , job_type , creator , executions = None , type = None , href = None , expand = None , items = None , count = None , project_id = None , project_name = None , ) Handle # [source] get_jobs_api # Project . get_jobs_api () Get the jobs api for the project. Returns JobsApi : The Jobs Api handle Creation # [source] create_job # JobsApi . create_job ( name , config ) Create a new job. import hopsworks connection = hopsworks . connection () project = connection . get_project () jobs_api = project . get_jobs_api () spark_config = jobs_api . get_configuration ( \"PYSPARK\" ) spark_config [ 'appPath' ] = \"/Resources/my_app.py\" job = jobs_api . create_job ( \"my_spark_job\" , spark_config ) Arguments name str : Name of the job. config dict : Configuration of the job. Returns Job : The Job object Raises RestAPIError : If unable to create the job Retrieval # [source] get_job # JobsApi . get_job ( name ) Get a job. Arguments name str : Name of the job. Returns Job : The Job object Raises RestAPIError : If unable to get the job [source] get_jobs # JobsApi . get_jobs () Get all jobs. Returns List[Job] : List of Job objects Raises RestAPIError : If unable to get the jobs Properties # [source] config # Configuration for the job [source] creation_time # Date of creation for the job [source] creator # Creator of the job [source] id # Id of the job [source] job_type # Type of the job [source] name # Name of the job Methods # [source] delete # Job . delete () Delete the job Potentially dangerous operation This operation deletes the job and all executions. Raises RestAPIError . [source] get_executions # Job . get_executions () Retrieves all executions for the job. Returns List[Execution] Raises RestAPIError in case the backend fails to retrieve executions. [source] run # Job . run ( args = None , await_termination = None ) Run the job, with the option of passing runtime arguments. Example of a blocking execution and downloading logs once execution is finished. # Run the job execution = job . run ( await_termination = True ) # True if job executed successfully print ( execution . success ) # Download logs out_log_path , err_log_path = execution . download_logs () Arguments args Optional[str] : optional runtime arguments for the job await_termination Optional[bool] : if True wait until termination is complete Returns Execution . The execution object for the submitted run. [source] save # Job . save () Save the job. This function should be called after changing a property such as the job configuration to save it persistently. job . config [ 'appPath' ] = \"Resources/my_app.py\" job . save () Returns Job . The updated job object. [source] get_configuration # JobsApi . get_configuration ( type ) Get configuration for the specific job type. Arguments type str : Type of the job. Currently, supported types include: SPARK, PYSPARK, PYTHON, DOCKER, FLINK. Returns dict : Default job configuration Raises RestAPIError : If unable to get the job configuration","title":"Jobs"},{"location":"generated/api/jobs/#jobs-api","text":"[source]","title":"Jobs API"},{"location":"generated/api/jobs/#job","text":"hopsworks . job . Job ( id , name , creation_time , config , job_type , creator , executions = None , type = None , href = None , expand = None , items = None , count = None , project_id = None , project_name = None , )","title":"Job"},{"location":"generated/api/jobs/#handle","text":"[source]","title":"Handle"},{"location":"generated/api/jobs/#get_jobs_api","text":"Project . get_jobs_api () Get the jobs api for the project. Returns JobsApi : The Jobs Api handle","title":"get_jobs_api"},{"location":"generated/api/jobs/#creation","text":"[source]","title":"Creation"},{"location":"generated/api/jobs/#create_job","text":"JobsApi . create_job ( name , config ) Create a new job. import hopsworks connection = hopsworks . connection () project = connection . get_project () jobs_api = project . get_jobs_api () spark_config = jobs_api . get_configuration ( \"PYSPARK\" ) spark_config [ 'appPath' ] = \"/Resources/my_app.py\" job = jobs_api . create_job ( \"my_spark_job\" , spark_config ) Arguments name str : Name of the job. config dict : Configuration of the job. Returns Job : The Job object Raises RestAPIError : If unable to create the job","title":"create_job"},{"location":"generated/api/jobs/#retrieval","text":"[source]","title":"Retrieval"},{"location":"generated/api/jobs/#get_job","text":"JobsApi . get_job ( name ) Get a job. Arguments name str : Name of the job. Returns Job : The Job object Raises RestAPIError : If unable to get the job [source]","title":"get_job"},{"location":"generated/api/jobs/#get_jobs","text":"JobsApi . get_jobs () Get all jobs. Returns List[Job] : List of Job objects Raises RestAPIError : If unable to get the jobs","title":"get_jobs"},{"location":"generated/api/jobs/#properties","text":"[source]","title":"Properties"},{"location":"generated/api/jobs/#config","text":"Configuration for the job [source]","title":"config"},{"location":"generated/api/jobs/#creation_time","text":"Date of creation for the job [source]","title":"creation_time"},{"location":"generated/api/jobs/#creator","text":"Creator of the job [source]","title":"creator"},{"location":"generated/api/jobs/#id","text":"Id of the job [source]","title":"id"},{"location":"generated/api/jobs/#job_type","text":"Type of the job [source]","title":"job_type"},{"location":"generated/api/jobs/#name","text":"Name of the job","title":"name"},{"location":"generated/api/jobs/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/jobs/#delete","text":"Job . delete () Delete the job Potentially dangerous operation This operation deletes the job and all executions. Raises RestAPIError . [source]","title":"delete"},{"location":"generated/api/jobs/#get_executions","text":"Job . get_executions () Retrieves all executions for the job. Returns List[Execution] Raises RestAPIError in case the backend fails to retrieve executions. [source]","title":"get_executions"},{"location":"generated/api/jobs/#run","text":"Job . run ( args = None , await_termination = None ) Run the job, with the option of passing runtime arguments. Example of a blocking execution and downloading logs once execution is finished. # Run the job execution = job . run ( await_termination = True ) # True if job executed successfully print ( execution . success ) # Download logs out_log_path , err_log_path = execution . download_logs () Arguments args Optional[str] : optional runtime arguments for the job await_termination Optional[bool] : if True wait until termination is complete Returns Execution . The execution object for the submitted run. [source]","title":"run"},{"location":"generated/api/jobs/#save","text":"Job . save () Save the job. This function should be called after changing a property such as the job configuration to save it persistently. job . config [ 'appPath' ] = \"Resources/my_app.py\" job . save () Returns Job . The updated job object. [source]","title":"save"},{"location":"generated/api/jobs/#get_configuration","text":"JobsApi . get_configuration ( type ) Get configuration for the specific job type. Arguments type str : Type of the job. Currently, supported types include: SPARK, PYSPARK, PYTHON, DOCKER, FLINK. Returns dict : Default job configuration Raises RestAPIError : If unable to get the job configuration","title":"get_configuration"},{"location":"generated/api/kafka_schema/","text":"KafkaSchema API # [source] KafkaSchema # hopsworks . kafka_schema . KafkaSchema ( id = None , subject = None , version = None , schema = None , project_id = None , type = None ) Handle # [source] get_kafka_api # Project . get_kafka_api () Get the kafka api for the project. Returns KafkaApi : The Kafka Api handle Creation # [source] create_schema # KafkaApi . create_schema ( subject , schema ) Create a new kafka schema. import hopsworks connection = hopsworks . connection () project = connection . get_project () kafka_api = project . get_kafka_api () avro_schema = { \"type\" : \"record\" , \"name\" : \"tutorial\" , \"fields\" : [ { \"name\" : \"id\" , \"type\" : \"int\" }, { \"name\" : \"data\" , \"type\" : \"string\" } ] } kafka_topic = kafka_api . create_schema ( \"my_schema\" , avro_schema ) Arguments subject str : subject name of the schema schema dict : avro schema definition Returns KafkaSchema : The KafkaSchema object Raises RestAPIError : If unable to create the schema Retrieval # [source] get_schema # KafkaApi . get_schema ( subject , version ) Get schema given subject name and version. Arguments subject str : subject name version int : version number Returns KafkaSchema : KafkaSchema object Raises RestAPIError : If unable to get the schema [source] get_schemas # KafkaApi . get_schemas ( subject ) Get all schema versions for the subject. Arguments subject str : subject name Returns List[KafkaSchema] : List of KafkaSchema objects Raises RestAPIError : If unable to get the schemas [source] get_subjects # KafkaApi . get_subjects () Get all subjects. Returns List[str] : List of registered subjects Raises RestAPIError : If unable to get the subjects Properties # [source] id # Id of the kafka schema [source] schema # Schema definition [source] subject # Name of the subject for the schema [source] version # Version of the schema Methods # [source] delete # KafkaSchema . delete () Delete the schema Potentially dangerous operation This operation deletes the schema. Raises RestAPIError .","title":"KafkaSchema"},{"location":"generated/api/kafka_schema/#kafkaschema-api","text":"[source]","title":"KafkaSchema API"},{"location":"generated/api/kafka_schema/#kafkaschema","text":"hopsworks . kafka_schema . KafkaSchema ( id = None , subject = None , version = None , schema = None , project_id = None , type = None )","title":"KafkaSchema"},{"location":"generated/api/kafka_schema/#handle","text":"[source]","title":"Handle"},{"location":"generated/api/kafka_schema/#get_kafka_api","text":"Project . get_kafka_api () Get the kafka api for the project. Returns KafkaApi : The Kafka Api handle","title":"get_kafka_api"},{"location":"generated/api/kafka_schema/#creation","text":"[source]","title":"Creation"},{"location":"generated/api/kafka_schema/#create_schema","text":"KafkaApi . create_schema ( subject , schema ) Create a new kafka schema. import hopsworks connection = hopsworks . connection () project = connection . get_project () kafka_api = project . get_kafka_api () avro_schema = { \"type\" : \"record\" , \"name\" : \"tutorial\" , \"fields\" : [ { \"name\" : \"id\" , \"type\" : \"int\" }, { \"name\" : \"data\" , \"type\" : \"string\" } ] } kafka_topic = kafka_api . create_schema ( \"my_schema\" , avro_schema ) Arguments subject str : subject name of the schema schema dict : avro schema definition Returns KafkaSchema : The KafkaSchema object Raises RestAPIError : If unable to create the schema","title":"create_schema"},{"location":"generated/api/kafka_schema/#retrieval","text":"[source]","title":"Retrieval"},{"location":"generated/api/kafka_schema/#get_schema","text":"KafkaApi . get_schema ( subject , version ) Get schema given subject name and version. Arguments subject str : subject name version int : version number Returns KafkaSchema : KafkaSchema object Raises RestAPIError : If unable to get the schema [source]","title":"get_schema"},{"location":"generated/api/kafka_schema/#get_schemas","text":"KafkaApi . get_schemas ( subject ) Get all schema versions for the subject. Arguments subject str : subject name Returns List[KafkaSchema] : List of KafkaSchema objects Raises RestAPIError : If unable to get the schemas [source]","title":"get_schemas"},{"location":"generated/api/kafka_schema/#get_subjects","text":"KafkaApi . get_subjects () Get all subjects. Returns List[str] : List of registered subjects Raises RestAPIError : If unable to get the subjects","title":"get_subjects"},{"location":"generated/api/kafka_schema/#properties","text":"[source]","title":"Properties"},{"location":"generated/api/kafka_schema/#id","text":"Id of the kafka schema [source]","title":"id"},{"location":"generated/api/kafka_schema/#schema","text":"Schema definition [source]","title":"schema"},{"location":"generated/api/kafka_schema/#subject","text":"Name of the subject for the schema [source]","title":"subject"},{"location":"generated/api/kafka_schema/#version","text":"Version of the schema","title":"version"},{"location":"generated/api/kafka_schema/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/kafka_schema/#delete","text":"KafkaSchema . delete () Delete the schema Potentially dangerous operation This operation deletes the schema. Raises RestAPIError .","title":"delete"},{"location":"generated/api/kafka_topic/","text":"KafkaTopic API # [source] KafkaTopic # hopsworks . kafka_topic . KafkaTopic ( name = None , num_of_replicas = None , num_of_partitions = None , schema_name = None , schema_version = None , schema_content = None , owner_project_id = None , shared = None , accepted = None , project_id = None , type = None , href = None , expand = None , items = None , count = None , ) Handle # [source] get_kafka_api # Project . get_kafka_api () Get the kafka api for the project. Returns KafkaApi : The Kafka Api handle Creation # [source] create_topic # KafkaApi . create_topic ( name , schema , schema_version , replicas = 1 , partitions = 1 ) Create a new kafka topic. import hopsworks connection = hopsworks . connection () project = connection . get_project () kafka_api = project . get_kafka_api () kafka_topic = kafka_api . create_topic ( \"my_topic\" , \"my_schema\" , 1 ) Arguments name str : name of the topic schema str : subject name of the schema schema_version int : version of the schema replicas int : replication factor for the topic partitions int : partitions for the topic Returns KafkaTopic : The KafkaTopic object Raises RestAPIError : If unable to create the topic Retrieval # [source] get_topic # KafkaApi . get_topic ( name ) Get kafka topic by name. Arguments name str : name of the topic Returns KafkaTopic : The KafkaTopic object Raises RestAPIError : If unable to get the topic [source] get_topics # KafkaApi . get_topics () Get all kafka topics. Returns List[KafkaTopic] : List of KafkaTopic objects Raises RestAPIError : If unable to get the topics Properties # [source] name # Name of the topic [source] partitions # Number of partitions for the topic [source] replicas # Replication factor for the topic [source] schema # Schema for the topic Methods # [source] delete # KafkaTopic . delete () Delete the topic Potentially dangerous operation This operation deletes the topic. Raises RestAPIError .","title":"KafkaTopic"},{"location":"generated/api/kafka_topic/#kafkatopic-api","text":"[source]","title":"KafkaTopic API"},{"location":"generated/api/kafka_topic/#kafkatopic","text":"hopsworks . kafka_topic . KafkaTopic ( name = None , num_of_replicas = None , num_of_partitions = None , schema_name = None , schema_version = None , schema_content = None , owner_project_id = None , shared = None , accepted = None , project_id = None , type = None , href = None , expand = None , items = None , count = None , )","title":"KafkaTopic"},{"location":"generated/api/kafka_topic/#handle","text":"[source]","title":"Handle"},{"location":"generated/api/kafka_topic/#get_kafka_api","text":"Project . get_kafka_api () Get the kafka api for the project. Returns KafkaApi : The Kafka Api handle","title":"get_kafka_api"},{"location":"generated/api/kafka_topic/#creation","text":"[source]","title":"Creation"},{"location":"generated/api/kafka_topic/#create_topic","text":"KafkaApi . create_topic ( name , schema , schema_version , replicas = 1 , partitions = 1 ) Create a new kafka topic. import hopsworks connection = hopsworks . connection () project = connection . get_project () kafka_api = project . get_kafka_api () kafka_topic = kafka_api . create_topic ( \"my_topic\" , \"my_schema\" , 1 ) Arguments name str : name of the topic schema str : subject name of the schema schema_version int : version of the schema replicas int : replication factor for the topic partitions int : partitions for the topic Returns KafkaTopic : The KafkaTopic object Raises RestAPIError : If unable to create the topic","title":"create_topic"},{"location":"generated/api/kafka_topic/#retrieval","text":"[source]","title":"Retrieval"},{"location":"generated/api/kafka_topic/#get_topic","text":"KafkaApi . get_topic ( name ) Get kafka topic by name. Arguments name str : name of the topic Returns KafkaTopic : The KafkaTopic object Raises RestAPIError : If unable to get the topic [source]","title":"get_topic"},{"location":"generated/api/kafka_topic/#get_topics","text":"KafkaApi . get_topics () Get all kafka topics. Returns List[KafkaTopic] : List of KafkaTopic objects Raises RestAPIError : If unable to get the topics","title":"get_topics"},{"location":"generated/api/kafka_topic/#properties","text":"[source]","title":"Properties"},{"location":"generated/api/kafka_topic/#name","text":"Name of the topic [source]","title":"name"},{"location":"generated/api/kafka_topic/#partitions","text":"Number of partitions for the topic [source]","title":"partitions"},{"location":"generated/api/kafka_topic/#replicas","text":"Replication factor for the topic [source]","title":"replicas"},{"location":"generated/api/kafka_topic/#schema","text":"Schema for the topic","title":"schema"},{"location":"generated/api/kafka_topic/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/kafka_topic/#delete","text":"KafkaTopic . delete () Delete the topic Potentially dangerous operation This operation deletes the topic. Raises RestAPIError .","title":"delete"},{"location":"generated/api/projects/","text":"Projects API # [source] Project # hopsworks . project . Project ( archived = None , created = None , description = None , docker_image = None , hops_examples = None , inodeid = None , is_old_docker_image = None , is_preinstalled_docker_image = None , owner = None , project_id = None , project_name = None , project_team = None , quotas = None , retention_period = None , services = None , datasets = None , ) Creation # [source] create_project # Connection . create_project ( name , description = None ) Create a new project. Example for creating a new project import hopsworks connection = hopsworks . connection () connection . create_project ( \"my_hopsworks_project\" , description = \"An example Hopsworks project\" ) Arguments name str : The name of the project. arguments : optional description of the project Returns Project . A project handle object to perform operations on. Retrieval # [source] get_project # Connection . get_project ( name = None ) Get an existing project. Arguments name str : The name of the project. Returns Project . A project handle object to perform operations on. [source] get_projects # Connection . get_projects () Get all projects. Returns List[Project] : List of Project objects Properties # [source] created # Timestamp when the project was created [source] description # Description of the project [source] id # Id of the project [source] name # Name of the project [source] owner # Owner of the project Methods # [source] get_dataset_api # Project . get_dataset_api () Get the dataset api for the project. Returns DatasetApi : The Datasets Api handle [source] get_git_api # Project . get_git_api () Get the git repository api for the project. Returns GitApi : The Git Api handle [source] get_jobs_api # Project . get_jobs_api () Get the jobs api for the project. Returns JobsApi : The Jobs Api handle [source] get_kafka_api # Project . get_kafka_api () Get the kafka api for the project. Returns KafkaApi : The Kafka Api handle","title":"Projects"},{"location":"generated/api/projects/#projects-api","text":"[source]","title":"Projects API"},{"location":"generated/api/projects/#project","text":"hopsworks . project . Project ( archived = None , created = None , description = None , docker_image = None , hops_examples = None , inodeid = None , is_old_docker_image = None , is_preinstalled_docker_image = None , owner = None , project_id = None , project_name = None , project_team = None , quotas = None , retention_period = None , services = None , datasets = None , )","title":"Project"},{"location":"generated/api/projects/#creation","text":"[source]","title":"Creation"},{"location":"generated/api/projects/#create_project","text":"Connection . create_project ( name , description = None ) Create a new project. Example for creating a new project import hopsworks connection = hopsworks . connection () connection . create_project ( \"my_hopsworks_project\" , description = \"An example Hopsworks project\" ) Arguments name str : The name of the project. arguments : optional description of the project Returns Project . A project handle object to perform operations on.","title":"create_project"},{"location":"generated/api/projects/#retrieval","text":"[source]","title":"Retrieval"},{"location":"generated/api/projects/#get_project","text":"Connection . get_project ( name = None ) Get an existing project. Arguments name str : The name of the project. Returns Project . A project handle object to perform operations on. [source]","title":"get_project"},{"location":"generated/api/projects/#get_projects","text":"Connection . get_projects () Get all projects. Returns List[Project] : List of Project objects","title":"get_projects"},{"location":"generated/api/projects/#properties","text":"[source]","title":"Properties"},{"location":"generated/api/projects/#created","text":"Timestamp when the project was created [source]","title":"created"},{"location":"generated/api/projects/#description","text":"Description of the project [source]","title":"description"},{"location":"generated/api/projects/#id","text":"Id of the project [source]","title":"id"},{"location":"generated/api/projects/#name","text":"Name of the project [source]","title":"name"},{"location":"generated/api/projects/#owner","text":"Owner of the project","title":"owner"},{"location":"generated/api/projects/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/projects/#get_dataset_api","text":"Project . get_dataset_api () Get the dataset api for the project. Returns DatasetApi : The Datasets Api handle [source]","title":"get_dataset_api"},{"location":"generated/api/projects/#get_git_api","text":"Project . get_git_api () Get the git repository api for the project. Returns GitApi : The Git Api handle [source]","title":"get_git_api"},{"location":"generated/api/projects/#get_jobs_api","text":"Project . get_jobs_api () Get the jobs api for the project. Returns JobsApi : The Jobs Api handle [source]","title":"get_jobs_api"},{"location":"generated/api/projects/#get_kafka_api","text":"Project . get_kafka_api () Get the kafka api for the project. Returns KafkaApi : The Kafka Api handle","title":"get_kafka_api"},{"location":"generated/api/secrets/","text":"Secrets API # [source] Secret # hopsworks . secret . Secret ( name = None , secret = None , added_on = None , visibility = None , scope = None , owner = None , type = None , href = None , expand = None , items = None , count = None , ) Handle # [source] get_secrets_api # Connection . get_secrets_api () Get the secrets api. Returns SecretsApi : The Secrets Api handle Creation # [source] create_secret # SecretsApi . create_secret ( name , value , project = None ) Create a new secret. import hopsworks connection = hopsworks . connection () secrets_api = connection . get_secrets_api () secret = secrets_api . create_secret ( \"my_secret\" , \"Fk3MoPlQXCQvPo\" ) Arguments name str : Name of the secret. value str : The secret value. project Optional[str] : Name of the project to share the secret with. Returns Secret : The Secret object Raises RestAPIError : If unable to create the secret Retrieval # [source] get_secret # SecretsApi . get_secret ( name , owner = None ) Get a secret. Arguments name str : Name of the project. owner Optional[str] : email of the owner for a secret shared with the current project. Returns Secret : The Secret object Raises RestAPIError : If unable to get the secret [source] get_secret # SecretsApi . get_secret ( name , owner = None ) Get a secret. Arguments name str : Name of the project. owner Optional[str] : email of the owner for a secret shared with the current project. Returns Secret : The Secret object Raises RestAPIError : If unable to get the secret Properties # [source] created # Date when secret was created [source] name # Name of the secret [source] owner # Owner of the secret [source] scope # Scope of the secret [source] value # Value of the secret [source] visibility # Visibility of the secret Methods # [source] delete # Secret . delete () Delete the secret Potentially dangerous operation This operation deletes the secret and may break applications using it. Raises RestAPIError .","title":"Secrets"},{"location":"generated/api/secrets/#secrets-api","text":"[source]","title":"Secrets API"},{"location":"generated/api/secrets/#secret","text":"hopsworks . secret . Secret ( name = None , secret = None , added_on = None , visibility = None , scope = None , owner = None , type = None , href = None , expand = None , items = None , count = None , )","title":"Secret"},{"location":"generated/api/secrets/#handle","text":"[source]","title":"Handle"},{"location":"generated/api/secrets/#get_secrets_api","text":"Connection . get_secrets_api () Get the secrets api. Returns SecretsApi : The Secrets Api handle","title":"get_secrets_api"},{"location":"generated/api/secrets/#creation","text":"[source]","title":"Creation"},{"location":"generated/api/secrets/#create_secret","text":"SecretsApi . create_secret ( name , value , project = None ) Create a new secret. import hopsworks connection = hopsworks . connection () secrets_api = connection . get_secrets_api () secret = secrets_api . create_secret ( \"my_secret\" , \"Fk3MoPlQXCQvPo\" ) Arguments name str : Name of the secret. value str : The secret value. project Optional[str] : Name of the project to share the secret with. Returns Secret : The Secret object Raises RestAPIError : If unable to create the secret","title":"create_secret"},{"location":"generated/api/secrets/#retrieval","text":"[source]","title":"Retrieval"},{"location":"generated/api/secrets/#get_secret","text":"SecretsApi . get_secret ( name , owner = None ) Get a secret. Arguments name str : Name of the project. owner Optional[str] : email of the owner for a secret shared with the current project. Returns Secret : The Secret object Raises RestAPIError : If unable to get the secret [source]","title":"get_secret"},{"location":"generated/api/secrets/#get_secret_1","text":"SecretsApi . get_secret ( name , owner = None ) Get a secret. Arguments name str : Name of the project. owner Optional[str] : email of the owner for a secret shared with the current project. Returns Secret : The Secret object Raises RestAPIError : If unable to get the secret","title":"get_secret"},{"location":"generated/api/secrets/#properties","text":"[source]","title":"Properties"},{"location":"generated/api/secrets/#created","text":"Date when secret was created [source]","title":"created"},{"location":"generated/api/secrets/#name","text":"Name of the secret [source]","title":"name"},{"location":"generated/api/secrets/#owner","text":"Owner of the secret [source]","title":"owner"},{"location":"generated/api/secrets/#scope","text":"Scope of the secret [source]","title":"scope"},{"location":"generated/api/secrets/#value","text":"Value of the secret [source]","title":"value"},{"location":"generated/api/secrets/#visibility","text":"Visibility of the secret","title":"visibility"},{"location":"generated/api/secrets/#methods","text":"[source]","title":"Methods"},{"location":"generated/api/secrets/#delete","text":"Secret . delete () Delete the secret Potentially dangerous operation This operation deletes the secret and may break applications using it. Raises RestAPIError .","title":"delete"}]}